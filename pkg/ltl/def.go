package ltl

// define in frame control field
const (
	//bit mask
	LTL_FRAMECTL_TYPE_MASK                = 0x03
	LTL_FRAMECTL_DISALBE_DEFAULT_RSP_MASK = 0x04
	LTL_FRAMECTL_DIRECTION_MASK           = 0x08
	//subfield type
	LTL_FRAMECTL_TYPE_PROFILE        = 0x00
	LTL_FRAMECTL_TYPE_TRUNK_SPECIFIC = 0x01
	//subfield disable default response
	LTL_FRAMECTL_DIS_DEFAULT_RSP_OFF = 0
	LTL_FRAMECTL_DIS_DEFAULT_RSP_ON  = 1
	//subfield direction
	LTL_FRAMECTL_SERVER_CLIENT_DIR = 0 // server --> client
	LTL_FRAMECTL_CLIENT_SERVER_DIR = 1 // client --> server
)

// General command IDs on profile
const (
	LTL_CMD_READ_ATTRIBUTES = iota
	LTL_CMD_READ_ATTRIBUTES_RSP
	LTL_CMD_WRITE_ATTRIBUTES
	LTL_CMD_WRITE_ATTRIBUTES_UNDIVIDED
	LTL_CMD_WRITE_ATTRIBUTES_RSP
	LTL_CMD_WRITE_ATTRIBUTES_NORSP
	LTL_CMD_CONFIGURE_REPORTING
	LTL_CMD_CONFIGURE_REPORTING_RSP
	LTL_CMD_READ_CONFIGURE_REPORTING
	LTL_CMD_READ_CONFIGURE_REPORTING_RSP
	LTL_CMD_REPORT_ATTRIBUTES
	LTL_CMD_DEFAULT_RSP
	LTL_CMD_PROFILE_MAX
)

// Data Types
const (
	LTL_DATATYPE_BOOLEAN = iota
	LTL_DATATYPE_INT8
	LTL_DATATYPE_INT16
	LTL_DATATYPE_INT32
	LTL_DATATYPE_INT64
	LTL_DATATYPE_UINT8
	LTL_DATATYPE_UINT16
	LTL_DATATYPE_UINT32
	LTL_DATATYPE_UINT64
	LTL_DATATYPE_SINGLE_PREC
	LTL_DATATYPE_DOUBLE_PREC
	LTL_DATATYPE_CHAR_STR
	LTL_DATATYPE_INT8_ARRAY
	LTL_DATATYPE_INT16_ARRAY
	LTL_DATATYPE_INT32_ARRAY
	LTL_DATATYPE_INT64_ARRAY
	LTL_DATATYPE_UINT8_ARRAY
	LTL_DATATYPE_UINT16_ARRAY
	LTL_DATATYPE_UINT32_ARRAY
	LTL_DATATYPE_UINT64_ARRAY
	LTL_DATATYPE_UNKNOWN
)

// 对于应用层的数据类型的一些 字节串 字符串 数组进行定义预留长度
const (
	OCTET_CHAR_HEADROOM_LEN = (1) // length : 1
)

const (
	/*** Error Status Codes ***/
	LTL_STATUS_SUCCESS = 0x00 //操作成功
	LTL_STATUS_FAILURE = 0x01 //操作失败
	// 0x02-0x7E are reserved.
	LTL_STATUS_MALFORMED_COMMAND      = 0x80
	LTL_STATUS_UNSUP_TRUNK_COMMAND    = 0x81 //不支持集下命令
	LTL_STATUS_UNSUP_GENERAL_COMMAND  = 0x82 //不支持profile下的通用标准命令
	LTL_STATUS_INVALID_FIELD          = 0x83 // 域无效,一般表现为发送的值域对设备无影响
	LTL_STATUS_UNSUPPORTED_ATTRIBUTE  = 0x84 //不支持的属性
	LTL_STATUS_INVALID_VALUE          = 0x85 // 无效数值
	LTL_STATUS_READ_ONLY              = 0x86 // 只读
	LTL_STATUS_NOT_FOUND              = 0x87 //请求的信息没有找到
	LTL_STATUS_UNREPORTABLE_ATTRIBUTE = 0x88 // 这个属性不能定期报告
	LTL_STATUS_INVALID_DATA_TYPE      = 0x89 //无效数据类型
	LTL_STATUS_WRITE_ONLY             = 0x8a //只写
	LTL_STATUS_DEFINED_OUT_OF_BAND    = 0x8b // 写的数据超过范围
	LTL_STATUS_INCONSISTENT           = 0x8c
	LTL_STATUS_ACTION_DENIED          = 0x8d // 拒绝此命令动作
	LTL_STATUS_TIMEOUT                = 0x8e //超时
	LTL_STATUS_ABORT                  = 0x8f //停止
	LTL_STATUS_HARDWARE_FAILURE       = 0x90 // 硬件问题错误
	LTL_STATUS_SOFTWARE_FAILURE       = 0x91 // 软件错误
	// 0xa0-0xff are reserved.
	LTL_STATUS_CMD_HAS_RSP = 0xff

	/*** Attribute Access Control - bit masks ***/
	ACCESS_CONTROL_READ  = 0x01
	ACCESS_CONTROL_WRITE = 0x02

	// Used by ltlReadWriteCB_t callback function
	LTL_OPER_LEN   = 0x00 // Get length of attribute value to be read
	LTL_OPER_READ  = 0x01 // Read attribute value
	LTL_OPER_WRITE = 0x02 // Write new attribute value

	LTL_SUCCESS  = 0x00
	LTL_FAILURE  = 0x01
	LTL_MEMERROR = 0x02
)
